{"meta":{"title":"个人博客","subtitle":null,"description":null,"author":"Andy","url":"http://yoursite.com"},"pages":[{"title":"categories","date":"2019-01-02T08:17:29.000Z","updated":"2019-01-02T08:17:29.643Z","comments":true,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Linux Shell 判断 if else 用法","slug":"Linux Shell 判断 if else 用法","date":"2019-01-03T01:41:34.610Z","updated":"2019-01-03T01:46:38.452Z","comments":true,"path":"2019/01/03/Linux Shell 判断 if else 用法/","link":"","permalink":"http://yoursite.com/2019/01/03/Linux Shell 判断 if else 用法/","excerpt":"","text":"原文地址 https://www.cnblogs.com/waitig/p/5578022.html 判断语句是每个语言都必不可少的关键语法，Shell 命令当然也不例外。今天就给大家介绍下 Shell 判断语句 if else 用法。 if 语句通过关系运算符判断表达式的真假来决定执行哪个分支。 Shell 有三种 if else 格式： if … fi 格式 if … else … fi 格式 if … elif … else … fi 格式 下面我就分别就这几种格式来为大家详细介绍下。 一、Shell 判断语法之 if … else 格式if … else 格式的语法：if [ expression ] then Statement(s) to be executed if expression is true fi 说明：如果 expression 返回 true，then 后边的语句将会被执行； 如果返回 false，不会执行任何语句。 最后必须以 fi 来结尾闭合 if，fi 就是 if 倒过来拼写，后面也会遇见。 注意：expression 和方括号 ([]) 之间必须有空格，否则会有语法错误。 使用举例：#!/bin/sh a=400 b=800 if [ $a == $b ] then echo \"a is equal to b\" fi if [ $a != $b ] then echo \"a is not equal to b\" fi 运行结果： a is not equal to b 二、Shell 判断语法之 if … else … fi 格式if … else … fi 语句的语法if [ expression ] then Statement(s) to be executed if expression is true else Statement(s) to be executed if expression is not true fi 说明：如果 expression 返回 true，那么 then 后边的语句将会被执行； 否则的话，将会执行 else 后边的语句。 使用举例：#!/bin/sh a=400 b=800 if [ $a == $b ] then echo \"a is equal to b\" else echo \"a is not equal to b\" fi 执行结果： a is not equal to b 三、Shell 判断语法之 if … elif … fi 格式if … elif … fi 语句可以对多个条件进行判断 语法：if [ expression 1 ] then Statement(s) to be executed if expression 1 is true elif [ expression 2 ] then Statement(s) to be executed if expression 2 is true elif [ expression 3 ] then Statement(s) to be executed if expression 3 is true else Statement(s) to be executed if no expression is true fi 说明：哪一个 expression 的值为 true，就执行哪个 expression 后面的语句； 如果都为 false，那么不执行任何语句。 使用举例：#!/bin/sh a=400 b=800 if [ $a == $b ] then echo \"a is equal to b\" elif [ $a -gt $b ] then echo \"a is greater than b\" elif [ $a -lt $b ] then echo \"a is less than b\" else echo \"None of the condition met\" fi 运行结果： a is less than b 四、其他说明if … else 语句也可以写成一行，以命令的方式来运行，像这样： if test $[2*3] -eq $[1+5]; then echo 'The two numbers are equal!'; fi; if … else 语句也经常与 test 命令结合使用，如下所示： num1=$[2*3] num2=$[1+5] if test $[num1] -eq $[num2] then echo 'The two numbers are equal!' else echo 'The two numbers are not equal!' fi 输出： The two numbers are equal! test 命令用于检查某个条件是否成立，与方括号 ([]) 类似。 好了，今天对于 Shell 判断（Shell if else）用法就先为大家介绍到这里，还是那句话，大家要多多练习才是。 更多 shell 教程请看：Linux Shell 系列教程 本文由 Linux 技术达人【daxue】发表在：Linux 大学本文固定链接：Linux Shell 系列教程之（九）Shell 判断 if else 用法","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[]},{"title":"Jenkins 中 Git Plugin 配置的几个小问题","slug":"Jenkins 中 Git Plugin 配置的几个小问题","date":"2019-01-03T01:41:34.599Z","updated":"2019-01-03T01:45:36.864Z","comments":true,"path":"2019/01/03/Jenkins 中 Git Plugin 配置的几个小问题/","link":"","permalink":"http://yoursite.com/2019/01/03/Jenkins 中 Git Plugin 配置的几个小问题/","excerpt":"","text":"原文地址 https://blog.csdn.net/csxiaoshui/article/details/49945265 最近持续集成出现了一些问题，翻出来看了一下，发现之前许多配置都有点问题，导致在新环境的配置中屡屡失败，经过一番测试总算配置成功。记录其中几个坑，主要是关于 Git 的一些配置，供日后查阅。 CI（Continuous Integration）持续集成其实是由一系列的最佳实践所构成，包括了源代码的版本控制和管理、自动化构建、自动化测试、代码审查、自动发行和部署、持续反馈等等，对于快速迭代的项目非常有效。在 CI 中比较常用的一个工具是 Jenkins（前身是 Hudson，由于版权原因更名为 Jenkins）。 持续集成的第一步一般需要将源码从代码托管服务器下载下来，Jenkins 默认安装之后并没有支持 GIT 代码托管工具，需要安装一个对应的插件，可以安装 Git Plugin，关于 Git Plugin 的介绍可以参考：https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin安装完成之后，当我们使用 Jenkins 创建项目之后，在填写好 Git 仓库地址之后，当执行构建操作的时候，会发现代码根本 clone 不下来，构建过程一直停在代码下载这一步，下面看一下如何解决这个问题，在此之前先介绍一些关于 GIT 与 SSH 等内容。 TortoiseGIT 在 Windows 系统下，使用较多的一个图形界面的 GIT 工具是 TortoiseGIT，在安装它的过程中，一般会出现下面的界面： 安装程序让我们选择使用哪种 ssh 的客户端，TortoiseGIT 默认的客户端是 TortoiseGItPlink，如果我们选择这一项，那么当我们使用 Git 命令行 或者 使用 TortoiseGit 去 Clone 代码的时候，使用的并不是同一个客户端。如果选择的是下面的选项 OpenSSH，那么二者就是相同的，都是 OpenSSH 客户端。之所以提到这一点是因为这里的选择对后续我们设置 ssh key 的时候有点影响，当然究竟 TortoiseGit 使用哪一个 ssh 客户端，在安装完成之后也可以配置，具体的配置可以在 TortoiseGit 的 settings 中找到，如下图所示： SSH Key SSH 为 Secure Shell 的缩写，由 IETF 的网络工作小组（Network Working Group）所制定；SSH 为建立在应用层和传输层基础上的安全协议。SSH 是目前较可靠，专为远程登录会话和其他网络服务提供安全性的协议。Git 代码可以通过 SSH 协议下载到本地，它提供两种方式：1. 常规的基于密码的方式 2. 使用密钥的方式当我们在 Jenkins 中使用 Git Plugin 插件的时候，不能使用基于密码的方式，使用这种方式会让代码 clone 过程一直卡住，实际上是 ssh 需要我们输入密码以便它能继续，但是在构建过程中根本没办法与它进行交互，输入密码，因此我们只能使用第二种方式关于 ssh key 的产生，可以使用下面的方法：1. 首先在 Git 客户端安装目录的 bin 文件夹中找到 ssh-keygen，这个工具是用来生成 ssh 的公钥和私钥的，运行下面的命令： 1$ssh-keygen -t rsa -C “youraccount@gmail.com” 之后，设置保存的位置，键入密码（Jenkins 使用 git plugin 密码必须为空，直接回车就可以），之后会生成两个文件 id_rsa 和 id_rsa.pub 2. 完成之后需要在托管 Git 仓库的服务器上添加 公钥，添加一般在登录账户的设置里面。 关于 TortoiseGit 中 TortoiseGitPlink 的设置 上面讲的使用 ssh-keygen 是用来产生 OpenSSH 客户端的公钥和私钥的，如果我们使用 TortoiseGit 并配置 GitPlink，那么我们需要产生一个 putty 客户端的 key，也就是产生一个 ppk 的文件，关于这方面的资料很多，可以参考：GitLab 服务器下客户端 TortoiseGit 配置和使用教程 Jenkins Git Plugin For Windows 的设置 Git Plugin 在 Windows 上的设置需要注意几点：1. Jenkins 安装在 Windows 上是以服务的方式安装的，并且它安装启动的账户是 Local System ，并非是你当前的账户，假设我当前的用户是 frank，Jenkins 运行起来的用户其实并不是 frank，而是 Local System 账户，但是这个账户并没有 SSH，所以导致代码在构建过程中 clone 的时候一直停在那里。2. 为了解决这个问题第一个方案就是将 用户目录下 (也就是 c:\\users\\frank 目录) 的 .ssh 文件夹拷贝到 Local System 的用户目录下，但是这个用户目录在哪儿呢，在我的计算机中（使用的是 64 位的 Win7 系统）这个目录位于：C:\\Windows\\SysWOW64\\config\\systemprofile，只需要把 .ssh 目录拷贝到这个目录就可以了（需要注意的是. ssh 目录中包括公钥、私钥和 known_hosts 文件）3. 这个 known_hosts 文件在你在网站上添加完公钥之后，使用 git clone 命令获取一份代码的时候，命令行就会给出提示，当你输入 yes 之后自动会生成的。4. 除了上述方法之外，经过测试发现将. ssh 目录中的文件拷贝到 git 安装目录下的. ssh 目录中也是可以的，应该是 Local System 账户读取了 git 安装目录中的. ssh。5. 最后需要注意配置完之后重启一次 Jenkins，在 Jenkins 的首页地址栏后面添加 /restart 确认之后就重启了，重启之后当重新构建的时候代码就可以 clone 下来。","categories":[{"name":"jenkins","slug":"jenkins","permalink":"http://yoursite.com/categories/jenkins/"}],"tags":[]},{"title":"搭建 Jenkins+Github 集成环境","slug":"搭建 Jenkins+Github 集成环境","date":"2019-01-03T01:41:34.589Z","updated":"2019-01-03T01:47:36.121Z","comments":true,"path":"2019/01/03/搭建 Jenkins+Github 集成环境/","link":"","permalink":"http://yoursite.com/2019/01/03/搭建 Jenkins+Github 集成环境/","excerpt":"","text":"原文地址 https://blog.csdn.net/twc829/article/details/52135157 一、进入 Jenkins在浏览器输入网址：http://localhost:8080/jenkins/，进入 Jenkins； 二、新建项目首页左侧点击” 新建 “，输入项目名称和指定构建什么类型的项目； 其中， 构建一个自由风格的软件项目：Jenkins 主要功能，结合任何 SCM 和任何构建系统构建项目，甚至可以构建软件以外的系统 构建一个 maven 项目：Jenkins 利用指定 POM.xml 文件，大大减轻构建配置 构建一个多配置项目：如多环境测试、平台指定构建等 监控一个外部的任务：允许记录执行在外部 Jenkins 的任务，任务甚至运行在远程机器上 复制已存在的 job： 这里，选择构建一个自由风格的软件项目； 三、项目配置点击进入新建的项目，进行配置； 0 基本配置 丢弃旧的构建：可以只保留几天内的构建历史或只保留几个构建历史 参数化构建过程：可以配置参数，每次执行构建时需要给参数赋值 关闭构建：重新开启构建前不允许进行新的构建 在必要时并发构建： Restrict where this project can be run：当配置 slave 节点后，通过该选择执行构建的节点，可以是 master 主机或 slave 节点 1 高级配置 安静期：一个任务计划中的构建在开始前需要读取开始前的配置信息；不选中则使用系统默认值 重复次数：若从版本库签除代码失败，则 Jenkins 会按指定次数重试后再放弃 该项目的上游项目正在构建时阻止该项目构建：当项目有依赖关系时，需要勾选 该项目的下游项目正在构建时阻止该项目构建： 使用自定义的工作空间：每个 Jenkins 任务都会有唯一一个工作空间目录，下载源代码，构建的整个过程都是在这个工作空间中 显示名称：仅供 Jenkins Web 页面显示 2 源码管理Jenkins 支持多种源码管理服务器； 这里选择 Git，因为本文主旨就是搭建 Jenkins+Github 环境； 其中， Repository URL 是你的 Github 上代码更新会触发 Jenkins 的 repo 的 ssh key； Credentials 是权限认证，需要添加，即输入访问该 repo 的用户名和密码； 源码库浏览器是该 repo 的 URL，是可选的； 3 构建触发器根据项目需要，选择触发 Jenkins 的方式； 其中， Trigger builds remotely （触发远程构建，如使用远程脚本触发自动构建）：可通过电子邮件触发项目构建，或通过脚本提交一个构建请求 Build after other projects are built （在其他项目构建完成后执行该构建）：可设置多个依赖的 jobs，当任意一个依赖的 job 成功构建后启动此构建，多个依赖的 jobs 之间用 “,” 隔开 Build periodically （定期构建）：不管源码是否有更新，周期构建，在” 日程表 “中定义触发时间 Build when a change is pushed to Github （当源码更新推送到 Github 后执行该构建）： Poll SCM （定期检查源码是否更新）：定时检查源码更新，有更新则执行构建，没有更新就不执行；在” 日程表 “中定义触发时间 其中，日程表用空格或 Tab 键分隔 5 个字段，分别代表 “MINUTE（分钟，0~59）”, “HOUR（小时，0~23）”, “DOM（日，1~31）”, “MONTH（月，1~12）”, “DOW（星期，0~7）”； 这里，选择 Poll SCM，参数值为 “H/2 “，即设置每 2 分钟检查 Github 的指定 repo 有无源码更新； （PS：对于 Build when a change is pushed to Github，目前还没成功过）； 4 构建环境根据需要进行选择； Delete workspace before build starts：构建执行前删除工作区 Abort the build if it’s stuck：如果构建卡住，中止该构建 Add timestamps to the Console Output：在控制台添加时间戳 Use secret text(s) or file(s)：使用密文 这里，选择添加时间戳； 5 构建 Execute Windows batch command：执行 Windows 命令行，默认当前路径是当前 job 的 workspace Execute shell：运行 shell、python、perl、ruby 等脚本 Invoke Ant：调用 Ant 构建 Ant Version：指定使用的 Ant 版本，下拉列表中显示系统配置中配置的所有 Ant 版本，不要选择 Defualt Targets：指定需要执行的 Target，不填写时默认执行 build 脚本中的 Default target Build File：指定需要执行的 build 脚本文件，可使用绝对路径或相对路径，默认相对路径根目录是当前任务的 workspace Properties：指定 Ant 变量 Java Options：若需要添加用户自定义的 ANT_OPTS，在这里添加，如 - Xmx512m Invoke top-level Maven targets：调用 Maven 构建 Maven Version：指定所使用的 Maven 版本 Goals：执行的 Maven 命令行，不需要加 mvn POM：指定 pom.xml 文件 这里，构建执行一个 python 程序； 6 构建后操作 Aggregate downstream test result：整合 Downstream 测试 Archive the artifacts：将生成的文件存档，如. zip/.jar 文件，以备以后下载用 Build other projects：最常用操作，在一个构建任务完成后，可触发另一个构建任务，如部署任务完成后可触发下游任务自动化测试；根据不同场景选择不同的触发方式 Publish JUnit test result report：将 JUnit Test 报告打印到展示平台 Publish Javadoc：打印 Javadoc Record fingerprints of files to track usage：Jenkins 记录一个文件的指纹，用来追踪该 jar 包是什么时间打的 Deploy war/ear to a container：将包部署到一个容器上，目前支持 Tomcat、JBoss、Glassfish WAR/EAR files：需要部署的 war/ear 包的文件，需要指定目录 Context path： Container：选择容器，包括容器的对应版本 Manage user name：管理员的用户名 MAnager password：管理员的密码 Tomcat URL：Tomcat URL 地址 Deploy on failure：配置任务失败时是否仍然部署 Email Notification：邮件通知 Editable Email Notification： 四、执行构建1 手动执行点击 “立即构建（build now）”； 执行结果： 2 自动执行在 Github 指定 repo 上有源码更新，必须从本地 push 到远程主机； 更新到远程主机之后 2 分钟，Jenkins 检测有更新，则自动触发构建执行； 执行结果：","categories":[{"name":"jenkins","slug":"jenkins","permalink":"http://yoursite.com/categories/jenkins/"}],"tags":[]},{"title":"jenkins 使用 Publish Over SSH 插件实现远程自动部署","slug":"jenkins 使用 Publish Over SSH 插件实现远程自动部署","date":"2019-01-03T01:41:34.578Z","updated":"2019-01-03T01:50:34.899Z","comments":true,"path":"2019/01/03/jenkins 使用 Publish Over SSH 插件实现远程自动部署/","link":"","permalink":"http://yoursite.com/2019/01/03/jenkins 使用 Publish Over SSH 插件实现远程自动部署/","excerpt":"","text":"原文地址 http://blog.51cto.com/xiong51/2091739 目录 1、安装 1.1、安装插件 1.2、配置 2、配置 2.1、配置 jenkins 支持 maven 自动编译 2.2、配置文件 3、发布 4、脚本 官方特性介绍：publish over ssh SCP - 通过 SSH 发送文件（SFTP） 在远程服务器上执行命令（可以禁用服务器配置或整个插件） 使用用户名和密码（键盘交互）或公钥认证 密码 / 密码短语在配置文件和用户界面中加密 SSH SFTP / SSH Exec 可用作构建过程中的构建步骤（Freestyle 和 Matrix 项目） （maven）项目构建之前的 SSH，或者在构建之后运行，无论构建是否成功（请参阅下面的构建包装器） 该插件是 “提升意识”（直接从正在升级的版本的工件目录发送文件），请参阅促销 可以为作业配置中的每个服务器覆盖认证凭证（或者在全局配置中未提供该服务器的情况下提供它们） 如果文件传输失败，可以选择重试（适用于 flakey 连接） 启用命令 / 脚本在伪 TTY 中执行 1、安装 官网介绍：https://wiki.jenkins.io/display/JENKINS/Publish+Over+SSH+Plugin 1.1、安装插件 点击 - 系统管理 - 系统插件 - 可选插件中 直接搜 publish over ssh 点击安装，安装完之后，重启 jenkins 1.2、配置 点击 - 系统管理 - 系统设置 - 拉到最下面就有这个窗口了 ![](http://s1.51cto.com/images/20180327/1522133854498636.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=) Passphrase： 密码（目标机器的密码） Path to key：key 文件（私钥）的路径 SSH Server Name： 标识的名字（随便你取什么） Hostname： 需要连接 ssh 的主机名或 ip 地址，此处填写应用服务器 IP（建议 ip） Username： 用户名 Remote Directory： 远程目录 (要发布的目录, 比如 / usr/local/tomcat/webapps/) 2、配置 2.1、配置 jenkins 支持 maven 自动编译 链接：实例 3.2： http://blog.51cto.com/xiong51/2093450 2.2、配置文件 ![](http://s1.51cto.com/images/20180328/1522205024504630.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=) 12345Name ： 这里是自定义的ssh远程服务器，如果有多台,点击add post-build step 继续添加Source files ： 源文件地址，相对地址 比如 /root/.jenkins/workspace/jobname/target/xx.war 直接写成 target/xx.war就行Remove prefix ： 这里指的是忽略前面的 target/ 远程服务器直接显示就是xx.warRemote directory ： 远程服务器要保存的文件目录Exec command ： 这里直接写 bash 脚本名称 xx.sh 这里也是远程服务器的脚本 3、发布 ![](http://s1.51cto.com/images/20180328/1522205910944056.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=) ![](http://s1.51cto.com/images/20180328/1522205995656396.png?x-oss-process=image/watermark,size_16,text_QDUxQ1RP5Y2a5a6i,color_FFFFFF,t_100,g_se,x_10,y_10,shadow_90,type_ZmFuZ3poZW5naGVpdGk=) 4、脚本 个人练习使用 ，直接修改 server_name 是发布的项目名, 由 tomcat 定义 tomcat_m2mManger 是我定义的 tomcat 脚本名称，自带的脚本 进程可能会删除不了 war 包地址 我定义的为 / mnt，如果是别的更改一下目录就行 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768#!/bin/bash## __auther__: xiong# __ time __: 2018年03月28日 11:00:54# __ 作用 __: 用于jenkins build完成之后的最后操作shell脚本# __ 使用 __: 定义jenkins##---------------------------------- 文件路径配置 ----------------------------------# 定义基础路径及目录server_name=m2mManage# tomcat名称tomcat_server_name=tomcat_m2mManage# tomcat 服务启动脚本tomcat_serivce=/usr/local/$tomcat_server_name/sbin/$tomcat_server_name# 保存文件路径base_dir=/usr/local/websitework_dir=$base_dir/m2mManageDest# 以时间的方式来发布版本time=`date +%Y%m%d%H%M`time_dir=$work_dir/$server_name$time# 链接路径link_dir=$base_dir/$server_name# 配置文件路径conf_dir=WEB-INF/classes#---------------------------------- 启动及判断配置 ----------------------------------# 创建目录,如果存在,直接退出重新发布一次if [ -d $time_dir ];then exit 5else /bin/mkdir $time_dirfi# 检测这个端口判断服务是否启动,if /usr/sbin/ss -tnl | grep 这里定义端口地址;then # 启动了那就直接停止它 $tomcat_serivce stopfi# 将打包上传的文件传到这个目录下/usr/bin/unzip /mnt/$server_name/$server_name.war -d $time_dir/ &amp;&gt;/dev/null# 创建一个用于保存当前上线包的无效配置文件,并当无效配置文件复制到该文件中old_conf_dir=$time_dir/$conf_dir/bin/mkdir $old_conf_dir/old_conf/bin/mv -i $old_conf_dir/*.p* $old_conf_dir/old_conf/# 将上一个版本的配置文件复制到当前上线的文件中/bin/mv -i $link_dir/$conf_dir/*.p* $time_dir/$conf_dir# 判断上一个版本的软链接,用于回滚版本if [ -d $link_dir ];then /bin/rm -irf $link_dirfi# 重新定义新上线包的软链接/bin/ln -sv $time_dir $link_dir# 启动服务$tomcat_serivce start","categories":[{"name":"jenkins","slug":"jenkins","permalink":"http://yoursite.com/categories/jenkins/"}],"tags":[]},{"title":"Jenkins 实战部署 web 项目","slug":"Jenkins 实战部署 web 项目","date":"2019-01-03T01:41:34.565Z","updated":"2019-01-03T01:44:02.424Z","comments":true,"path":"2019/01/03/Jenkins 实战部署 web 项目/","link":"","permalink":"http://yoursite.com/2019/01/03/Jenkins 实战部署 web 项目/","excerpt":"","text":"原文地址 https://blog.csdn.net/com542948180/article/details/70142215 1.linux 系统安装 Jenkins (1) 官网下载 war 包: https://jenkins.io/download/ (2) 直接放入 Tomcat webapps 进行部署启动 2. 设置初始 user 3. 安装部署项目所需要的插件: (1)Email 插件: | | Email Extension Plugin | (2)Gradle 插件: Gradle Plugin (3)SVN 插件: | | Subversion Plug-in | (4) SSH 插件: | | SSH Credentials Plugin | 4. 配置 email: 系统管理 -&gt; 系统设置:需要配置的参数: (1) 系统管理员邮件地址 : AutomationTest@XXX.com(2)SMTP 服务器5. 配置 Gradle: step1: step2: 6. 配置 JDK: 7. 配置 SSH: 系统设置: 8. 开始部署你的第一个 Jenkins 项目: (1) (2) (3) 配置 SVN 地址 (4) 配置项目 code change build 周期和 check change 的周期: (5) 配置 gradle build 项目 war 包 (6) 配置 SSH, 把 jenkins 执行 gradle 打包好的 war 远程 copy 到 web app server 的 tomcat, 并且重启 tomcat, 最后设置 build 项目 email 通知的相关人员 email list 完整 SSH Command: #!/bin/bashsshpass -p “password” scp /data/jenkins/workspace/XXXX/build/libs/qa.war username@sjqatstXX:/data/qateam/apache-tomcat-7.0.76/webapps;sshpass -p “password” ssh -o StrictHostKeyChecking=no username@sjqatstXX “sh /data/qateam/apache-tomcat-7.0.76/bin/shutdown.sh;rm -rf /data/qateam/apache-tomcat-7.0.76/webapps/qa; sh /data/qateam/apache-tomcat-7.0.76/bin/startup.sh”; #!/bin/bashsshpass -p “password” scp /data/jenkins/workspace/QA*/build/libs/qa*.war username@sjqatst:/data/qateam/apache-tomcat-7.0.76/webapps;sshpass -p “password” ssh -o StrictHostKeyChecking=no username@sjqatst “sh /data/qateam/apache-tomcat-7.0.76/bin/shutdown.sh;rm -rf /data/qateam/apache-tomcat-7.0.76/webapps/qa*; sh /data/qateam/apache-tomcat-7.0.76/bin/startup.sh”;** (7) 点击 save 配置完毕 9. 配置完成, 点击 build 开始构建项目 #!/bin/bashsshpass -p “password” scp /data/jenkins/workspace/XXXX/build/libs/qa.war username@sjqatstXX:/data/qateam/apache-tomcat-7.0.76/webapps;sshpass -p “password” ssh -o StrictHostKeyChecking=no username@sjqatstXX “sh /data/qateam/apache-tomcat-7.0.76/bin/shutdown.sh;rm -rf /data/qateam/apache-tomcat-7.0.76/webapps/qa; sh /data/qateam/apache-tomcat-7.0.76/bin/startup.sh”;","categories":[{"name":"jenkins","slug":"jenkins","permalink":"http://yoursite.com/categories/jenkins/"}],"tags":[]},{"title":"CentOS7 配置代理","slug":"CentOS7 配置代理","date":"2019-01-03T01:41:34.551Z","updated":"2019-01-03T01:42:40.685Z","comments":true,"path":"2019/01/03/CentOS7 配置代理/","link":"","permalink":"http://yoursite.com/2019/01/03/CentOS7 配置代理/","excerpt":"","text":"原文地址 https://blog.csdn.net/hp020740426/article/details/78789680 一、全局代理设置如果是装有 GNOME 桌面的 CentOS7，可以通过系统的 Settings–&gt;Network proxy 来进行设置，如下： 但使用最小安装，或者不想通过界面来设计代理时，可通过修改 / etc/profile 文件来实现，如下： 12345678910111213#打开profile文件vim /etc/profile#添加Proxy代理信息（其中username和password根据需要填写，若无则不填写）http_proxy = http://username:password@proxy_ip:port/https_proxy = http://username:password@proxy_ip:port/ftp_proxy = http://username:password@proxy_ip:port/export http_proxyexport https_proxyexport ftp_proxy#生效配置source /etc/profile 二、yum 代理设置12345#打开yum.conf文件vim /etc/yum.conf#添加Proxy代理信息proxy = http://username:password@proxy_ip:port/ 三、wget 代理设置123456#打开/wgetrc文件vim /etc/wgetrc#修改Proxy代理信息http_proxy=http://username:password@proxy_ip:port/ftp_proxy=http://username:password@proxy_ip:port/ 四、重启服务器reboot","categories":[{"name":"linux","slug":"linux","permalink":"http://yoursite.com/categories/linux/"}],"tags":[]},{"title":"使用 Jenkins 自动编译部署 web 应用","slug":"使用 Jenkins 自动编译部署 web 应用","date":"2019-01-03T01:41:34.540Z","updated":"2019-01-03T01:48:19.126Z","comments":true,"path":"2019/01/03/使用 Jenkins 自动编译部署 web 应用/","link":"","permalink":"http://yoursite.com/2019/01/03/使用 Jenkins 自动编译部署 web 应用/","excerpt":"","text":"原文地址 https://blog.csdn.net/gavid0124/article/details/53463831 使用 Jenkins 自动编译部署 web 应用写在前面初步接触持续集成自动化过程，本篇主要介绍基于 Jenkins 实现持续集成的方式，通过案例介绍线上自动编译及部署的配置过程 持续集成 持续集成是一种软件开发实践，即团队开发成员经常集成它们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。 Jenkins Jenkins 是基于 Java 开发的一种持续集成工具，用于监控持续重复的工作，功能包括：1、持续的软件版本发布 / 测试项目。2、监控外部调用执行的工作。 更多信息请戳官网 安装网上有很多 Jenkins 安装配置教程，详情请戳 Jenkins 安装与配置 开始一个 DEMO背景Jenkins 运行在 Linux 服务器上，尝试在此服务器上编译并部署一个 web 应用，编译过程需要 node 环境，编译后文件需 ssh 到测试服务器 Jenkins 主要完成任务如下：1、自动集成编译环境2、线上编译应用3、ssh 到目标环境并运行 新建一个 Job登录进入 Jenkins，可以看到当前所有已集成项目的构建情况；1、点击左上角的【新建】，创建一个新任务 2、填写任务名称，构建的项目类型可根据实际情况进行选择，本次选择第一种即可 3、选择完毕，点击【OK】，回到首页，发现创建的 Job 已显示在列表中 配置编译环境在这个过程中，我们需要为应用配置基于 node 的编译环境。关于安装 node，一般可以下载执行文件安装或编译源码安装，而通过 Jenkins，我们则可考虑使用其提供的插件进行自动安装1、选择系统管理 -&gt; 管理插件 2、可以看到，Jenkins 提供了丰富的插件供开发者使用，找到我们需要的 [NodeJS Plugin]，勾选后点击安装即可 3、安装完毕后，选择系统管理 -&gt;Global Tool Configuration，配置 node 下载及安装 4、进入后，撸到底部，发现全局可用工具中已经出现了 NodeJS 的配置项5、插件支持多种方式安装 nodeJS，点击 [新建安装]，选择习惯的安装方式即可，此处给出从 node 官网下载并安装的配置 6、保存完毕后，通过列表，进入刚刚新建的 Job，找到【构建环境】，勾选 Provide Node &amp; npm bin/ folder to PATH，选择刚刚添加的配置即可；此后当每次 build，都会首先执行环境构建，环境构建无误后，才会开始真正的构建过程 配置构建过程在这个过程中，我们可以配置构建所需的参数，用来指明构建的位置（从哪个分支 / 哪个版本…）或其他一些状态；并通过命令执行构建。1、通过列表进入 Job 详情，开始相关配置；2、【General】一栏需要配置项目基础信息和一些构建需要的参数。选择【参数化构建】，此构建方式允许我们自定义构建过程中的参数。如下：配置一个branch参数，用于指明要构建的 git 分支 3、【源码管理】一栏需要填写待构建项目的源码地址，其中【Branches to build】用来指明待构建的分支，当然，也可以选择某个提交号，同时此处也可以使用我们在 General 中定义变量（详细配置见输入框右侧的 [帮助] 按钮） 4、【构建】一栏需要输入相关命令来实现自动化构建，此过程在【环境构建】后，故我们可以编写如下代码执行构建 5、线上编译完毕，下面将 build 完成的文件发送至目标环境（测试环境 / 生产环境）。继续在【构建】一栏中添加配置，指定目标环境相关信息；命令行配置 ssh 后的一些操作（解压文件，并删除压缩包） 执行构建至此，整个构建的配置算是基本完成，下面开始构建。回到列表页，点击构建即可： 可以看到构建历史列表中显示当前构建的进度 点击左侧圆形按钮，即可进入控制台查看输出构建完毕后，可以通过列表中的晴雨状态查看构建结果 结语本篇简单介绍了基于 Jenkins 构建的过程，Jenkins 功能还有很多，会在之后的篇幅中陆续介绍。随着项目开发规模和复杂度不断增大，持续集成是一个必然的选择。","categories":[{"name":"jenkins","slug":"jenkins","permalink":"http://yoursite.com/categories/jenkins/"}],"tags":[]},{"title":"持续集成①安装部署 jenkins 从 git 获取代码","slug":"持续集成①安装部署 jenkins 从 git 获取代码","date":"2019-01-03T01:35:03.609Z","updated":"2019-01-03T01:35:41.395Z","comments":true,"path":"2019/01/03/持续集成①安装部署 jenkins 从 git 获取代码/","link":"","permalink":"http://yoursite.com/2019/01/03/持续集成①安装部署 jenkins 从 git 获取代码/","excerpt":"","text":"原文地址 https://www.cnblogs.com/reblue520/p/7130914.html 持续集成①安装部署 jenkins 从 git 获取代码 一：持续集成的概念： 1.1: 总体的概括 持续集成Continuous Integration 持续交付Continuous Delivery 持续部署Continuous Deployment 1.2：什么是持续集成：持续集成是指开发者在代码的开发过程中，可以频繁的将代码部署集成到主干，并进程自动化测试 1.3：什么是持续交付：持续交付指的是在持续集成的环境基础之上，将代码部署到预生产环境 1.4：持续部署：在持续交付的基础上，把部署到生产环境的过程自动化，持续部署和持续交付的区别就是最终部署到生产环境是自动化的。 1.5: 关于安全：OWASP: 每年发布 top 10web 漏洞:top1：注入攻击漏洞，例如 SQL，OS 以及 LDAP 注入。这些攻击发生在当不可信的数据作为命令或者查询语句的一部分，被发送给解释器的时候。攻击者发送的恶意数据可以欺骗解释器，以执行计划外的命令或者在未被恰当授权时访问数据。 top2：失效的身份认证和会话管理: 与身份认证和会话管理相关的应用程序功能往往得不到正确的实现，这就导致了攻击者破坏密码、密匙、会话令牌或攻击其他的漏洞去冒充其他用户的身份。 top3：跨站脚本（XSS）: 当应用程序收到含有不可信的数据，在没有进行适当的验证和转义的情况下，就将它发送给一个网页浏览器，这就会产生跨站脚本攻击（简称 XSS）。XSS 允许攻击者在受害者的浏览器上执行脚本，从而劫持用户会话、危害网站、或者将用户转向至恶意网站。相关资料：http://www.owasp.org.cn/owasp-project/download/mobile-top-10-2013-2 二：安装部署持续集成工具 jenkins：2.1：安装部分：2.1.1：执行安装：下载 jdk-8u111-linux-x64.rpm # rpm -ivh jdk-8u111-linux-x64.rpm # vim /etc/profile export JAVA_HOME=/usr/java/jdk1.8.0_111 export PATH=$JAVA_HOME/bin:$PATH 安装 jenkins方法①yum 方式安装 # cd /etc/yum.repos.d/ # wget http://pkg.jenkins.io/redhat/jenkins.repo # rpm --import http://pkg.jenkins.io/redhat/jenkins.io.key # yum install -y jenkins # systemctl start jenkins 方法②通过 war 包的方式安装下载地址：http://updates.jenkins-ci.org/download/war/2.60.1/jenkins.war unzip apache-tomcat-8.0.37.zip mv apache-tomcat-8.0.37 /usr/local/ cd /usr/local ln -s /usr/local/apache-tomcat-8.0.37 /usr/local/tomcat useradd jenkins # 将jenkins.war放到/usr/local/tomcat/webapps目录下，解压 unzip -d jenkins jenkins.war chown -R jenkins.jenkins /usr/local/apache-tomcat-8.0.37 bin/startup.sh 2.1.2：打开 web 界面：第一次打开要输入随机生成的密码：http://192.168.3.199:8080/jenkins 查看密码 $ cat /home/jenkins/.jenkins/secrets/initialAdminPassword 8743f91ff1474a85a0abcd841fc74eb6 输入密码点下确认之后选择插件，选择默认安装插件即可，此过程需要一段时间，而且根据网络不同有些插件安装不成功，但是之后可以自己再安装即可 报错：An error occurredAn error occurred during installation: No such plugin: cloudbees-folder 解决办法：下载 cloudbees-folder.hpi 放在目录 / usr/local/tomcat/webapps/jenkins/WEB-INF/detached-plugins / 下，重启 tomcat 即可 设置用户名密码 3.1 配置邮件通知，系统管理–系统设置 添加管理员邮箱, 添加邮件 点击保存或测试邮件，系统会给目标邮箱发送一封测试邮件： 安装 gitlab 插件, 系统管理–管理插件–可选插件 插件安装界面，会额外安装一些依赖关系的插件，jenkins 基于 ruby 开发，所以会有 ruby 环境： 在 gitlab 管理界面将用户添加到一个项目，下一步要用此用户拉取项目代码 三：使用 jenkins：3.1：添加一个认证用户，拉取 git 代码的时候使用： 创建任务 –&gt; 构建一个自由风格的软件项目 项目描述信息： 配置 git 项目地址，我们先进行其他配置，等会再继续配置 git 相关的选项 系统管理 –&gt; Global Tool Configuration 配置 deploy-key如下配置, jenkins 服务器上 root 用户生成密钥对 [root@node1 ~]# ssh-keygen -t rsa Generating public/private rsa key pair. Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): Enter same passphrase again: Your identification has been saved in /root/.ssh/id_rsa. Your public key has been saved in /root/.ssh/id_rsa.pub. The key fingerprint is: bf:1e:4d:b3:0f:fb:8b:71:cd:ef:d3:70:69:a4:46:ff root@node1.chinasoft.com The key's randomart image is: +--[ RSA 2048]----+ | | | | | | | . . | | S + + .| | . o =.*.| | o * oo=| | o B .E| | .o o.+o+| +-----------------+ [root@node1 ~]# cat .ssh/id_rsa.pub ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3vhfbA4NdkP8g1WVyYkw93f1PZ04nWoyFnoerC9b40jIY5px+tkugdy/RZ3/bp4hMC5yNgV1S25Tm8RpzBJMp7pbJz8dO+LCKqUnXq9Eh0QhsZE0xlQN+J4awy9YIGiD2nFg7k/ZzeAtQRzNryrrPnKaWpXtg7tMGGTWBjeyLAVuqCOMU7euY94G26UmVfjDLIJkcJqB+8dwvodW3wpmUER32qVPKZLnSYSOCfoNed+P4Eujs5PBCLuzFvGyiDhY2Pwrk/4S11jWUa7TJItfoPXzeGc/ujaJi/o24dt8VXeFa/Rm4wywYLNW3TRjXy1mPpdVlob3701MMQ0bf3qPv root@node1.chinasoft.com gitlab 上配置 web-demo 项目设置 private deploy key 把 key 复制进去，同时 title 起一个简单明了的名字 在 jenkins 服务器 192.168.3.199 上测试下是否能够正常获取代码 [root@node1 tmp]# git clone git@192.168.3.198:web/web-demo.git Cloning into 'web-demo'... The authenticity of host '192.168.3.198 (192.168.3.198)' can't be established. ECDSA key fingerprint is 9d:60:c3:8e:49:72:e8:9c:c0:d6:c8:d2:f1:b6:3a:74. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added '192.168.3.198' (ECDSA) to the list of known hosts. remote: Counting objects: 79, done. remote: Compressing objects: 100% (79/79), done. remote: Total 79 (delta 17), reused 0 (delta 0) Receiving objects: 100% (79/79), 1.18 MiB | 0 bytes/s, done. Resolving deltas: 100% (17/17), done. jenkins 拉取代码没问题，继续配置 jenkins 的认证，这里应该输入私钥 复制 jenkins 拉取 git 代码服务器 root 的私钥 [root@node1 ~]# cat .ssh/id_rsa -----BEGIN RSA PRIVATE KEY----- MIIEpAIBAAKCAQEAt74X2wODXZD/INVlcmJMPd39T2dOJ1qMhZ6HqwvW+NIyGOac frZLoHcv0Wd/26eITAucjYFdUtuU5vEacwSTKe6Wyc/HTviwiqlJ16vRIdEIbGRN MZUDfieGsMvWCBog9pxYO5P2c3gLUEcza8q6z5ymlqV7YO7TBhk1gY3siwFbqgjj FO3rmPeBtulJlX4wyyCZHCagfvHcL6HVt8KZlBEd9qlTymS50mEjgn6DXnfj+BLo 7OTwQi7sxbxsog4WNj8K5P+EtdY1lGu0ySLX6D183hnP7o2iYv6NuHbfFV3hWv0Z uMMsGCzVt00Y18tZj6XVZaG9+9NTDENG396j7wIDAQABAoIBAEHMfCR9HJTsMMDk SmDs3JqnHWhK+UzUe0/6VmEla0VNmI0cQFyMEYcUR3Z41uulEgURf22ZLv9WDPuq yar4r26rtynsE1avbiEpwHzQVaMDhT2zqYUg9NA/fVdgl3PtT3KgyGQFd5MgIQUN ileGkOF6GpoGBqnOvJkJfAS5+0RHi8EZ8RcufNExgan5QF42dtKNWOEdgZIp0+WY jmI73YEpIadQzKxjL6PCOUmFAjfuNllw3It5QLePvYYlQeWKkl8QdROOADzOxgoj 6zCdzGo6ZqP4vK8gGioT7UybH1WJoN8of1ZBenKyT4+TagQYwqV0LXIpVBkHKgdD 5bxZIPkCgYEA4giWHweLYxmkZIXDx5VrOjIPmzTFqSfDMI9rDFQt57AbIr0hM4BW 6qmViWwuc9t28cLSXv+0FtycIfs4co8RvMinIMLykWddX8x3sniCr2+Pgn/G+RgQ FK36wN0dVZwwr/6oPeIDCJlr4AqhDAJLJkcbRjc5i8kR9OPHIvkPJjsCgYEA0Bou cmeOGYtrCW6t88xnmR26Sk8ybNWUdpju9SpEeCdz4jJnZC29AJ3qg8LilG0sDS/y 0cNT/iMP8x6FPeFqJnhI/l4C1H5WEqult/thMl1bZ+RFEO92EUcKEXZep0yu5Txr 6bHZzCnp9cYe56z9qsGk064LR2N9TR16xAzeud0CgYEArx0B2NZKeaNDBhHPxI8Q /IwOJSs0O0Gv6a4iu/F3gviffUFTOIgkTjbFwCqMrnuHYfOSccDeb5vIZlcvuyj2 D/DP8gS2UknnQDGzRhQxAuOGJg8CQrcOtka3brWfZVTVL3Q2OYMg4Iej2HXDoP8h 42zRR4u/THmhLL1O6NxVjUMCgYBslKyVbuja9T61HjXPVmDbqIIyEZ6a4NnlA6jy 7Mnq85LofCosQB00vDDH7SCyF0B75P/KaSNjH8JLtSoKfpoXVn2nkz/gxcZ9WWhP Ve+CCuoNjDJpQriVDT74m42Jt14uJ9eaiPy+JUR4w5YOhdmZhg5NkKs75XJUkUQk FR8FVQKBgQDOWXJYF3VEYdCD1qIy/CsY3s4ARD9kery+5aOCu6TNd6auYEfqxsev ie1jD+cvAgVR1aZ5aP3C8jEYhZa4xgn1+hxfRLWs79uMYnXXNGJ+FxKftDyhuV+m efEQrUf8jh4MofW9Ee6Z7YjitIRY7SQ+kZl2Xms+QZlJotBzTG2DSA== -----END RSA PRIVATE KEY----- 添加描述，点击 OK 继续编辑配置 这样就不报错了，下面还可以指定从哪个分支拉取，默认从 master 拉取，有些公司使用 release 分支 源码浏览器，去 gitlab 上找到 http 的 url：http://192.168.3.198/web/web-demo.git 找出 gitlab 的版本，输入 url 和版本，版本只支持 2 位，拉到最下面保存 [root@web01 ~]# rpm -qa|grep gitlab gitlab-ce-8.10.5-ce.0.el7.x86_64 点击立即构建，查看控制台，可以看到构建的详细输出","categories":[{"name":"jenkins","slug":"jenkins","permalink":"http://yoursite.com/categories/jenkins/"}],"tags":[]},{"title":"jenkins 自动化部署 vue","slug":"jenkins 自动化部署 vue","date":"2019-01-03T01:31:05.685Z","updated":"2019-01-03T01:33:07.077Z","comments":true,"path":"2019/01/03/jenkins 自动化部署 vue/","link":"","permalink":"http://yoursite.com/2019/01/03/jenkins 自动化部署 vue/","excerpt":"","text":"一、nodejs 配置首先加入 nodejs 插件–&gt;–&gt;在配置里面配置这个插件–&gt;这样我们就能在自动构建发布的配置里看到 nodejs 的编译选项了 二、发布配置首先新建一个自由风格的项目 然后配置构建保留天数和参数化构建这里选择在 svn 上的资源，配置好访问的用户信息这样我们在构建的时候能看到项目的不同版本 接下来选择构建的数据源位置 12345678910echo $PATHnode -vnpm -vnpm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedrivernpm installnpm run buildcd distrm -rf vue-mall.tar.gztar -zcvf vue-mall.tar.gz *cd ../ 12345cd /usr/local/nginx/htmlrm -rf mallmkdir malltar -zxvf vue-mall.tar.gz -C mall/rm -rf vue-mall.tar.gz ssh server 的配置如下–&gt; 三、遇到的问题①npm 代理问题在 jenkins 的服务器上设置 npm config 123456#可以访问外网的代理ip地址和端口npm config proxy=http://ip:portnpm config https-proxy=http://ip:port#镜像选择淘宝的镜像npm config set registry=http://registry.npm.taobao.orgnpm info underscore （如果上面配置正确这个命令会有字符串response） ②chromedriver@2.37.0 install: `node install.js 这里我们在上面的构建中已经有体现，加上如下命令 1npm install chromedriver --chromedriver_cdnurl=http://cdn.npm.taobao.org/dist/chromedriver 原文地址 https://blog.csdn.net/jonsonler/article/details/81317352","categories":[{"name":"jenkins","slug":"jenkins","permalink":"http://yoursite.com/categories/jenkins/"}],"tags":[]},{"title":"hexo设置 关于 标签 分类 归档","slug":"simpread-hexo 设置 关于 标签 分类 归档 - 阿甘的博客 - CSDN 博客","date":"2019-01-02T10:10:06.769Z","updated":"2019-01-02T08:29:22.683Z","comments":true,"path":"2019/01/02/simpread-hexo 设置 关于 标签 分类 归档 - 阿甘的博客 - CSDN 博客/","link":"","permalink":"http://yoursite.com/2019/01/02/simpread-hexo 设置 关于 标签 分类 归档 - 阿甘的博客 - CSDN 博客/","excerpt":"","text":"1：添加 关于页面使用：hexo new page &quot;about&quot; 新建一个 关于我 页面。主题的 _config.yml 文件中的 menu 中进行匹配 123456menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 tags: /tags //标签 about: /about //关于 （添加此行即可） 编辑 about 关于页面 md 文件 部署就能看到 2：添加 标签页面使用： hexo new page tags 新建一个 标签 页面。主题的 _config.yml 文件中的 menu 中进行匹配 123456menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 tags: /tags //标签 （添加此行即可） about: /about //关于 底下代码是一篇包含 标签 文章的例子： 12345title: 标签测试tags: - Testing （这个就是文章的标签了） - Another Tag （这个就是文章的标签了）--- 3：添加 分类页面使用： hexo new page categories 新建一个 分类 页面。主题的 _config.yml 文件中的 menu 中进行匹配 123456menu: home: / //主页 categories: /categories //分类 （添加此行即可） archives: /archives //归档 tags: /tags //标签 about: /about //关于 底下代码是一篇包含 分类 文章的例子： 1234title: 分类测试categories:- hexo （这个就是文章的分类了）--- 4：添加 归档页面主题的 _config.yml 文件中的 menu 中进行匹配 123456menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 （添加此行即可） tags: /tags //标签 about: /about //关于 5：添加 自定义页面使用： hexo new page &quot;guestbook&quot; 新建一个 自定义 页面。主题的 _config.yml 文件中的 menu 中进行匹配 1234567menu: home: / //主页 categories: /categories //分类 archives: /archives //归档 tags: /tags //标签 about: /about //关于 guestbook: /guestbook //自定义 （添加此行即可） 原文地址 https://blog.csdn.net/ganzhilin520/article/details/79047249","categories":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/categories/hexo/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-01-02T10:10:06.767Z","updated":"2019-01-02T07:48:03.879Z","comments":true,"path":"2019/01/02/hello-world/","link":"","permalink":"http://yoursite.com/2019/01/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}